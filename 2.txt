[2. SQL Queries: 
a. Design and Develop SQL DDL statements which demonstrate the use of SQL objects such 
as Table, View, Index, Sequence, Synonym, different constraints etc.
b. Write at least 10 SQL queries on the suitable database application using SQL DML
statements.
 Note: Instructor will design the queries which demonstrate the use of concepts like Insert, Select,
Update, Delete with operators, functions, and set operator etc]


1. **Create Tables with Constraints**:


CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY AUTO_INCREMENT,
    DepartmentName VARCHAR(100) NOT NULL,
    Location VARCHAR(100)
);

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    DepartmentID INT,
    Salary DECIMAL(10, 2),
    DateHired DATE,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

CREATE TABLE Projects (
    ProjectID INT PRIMARY KEY AUTO_INCREMENT,
    ProjectName VARCHAR(100) NOT NULL,
    StartDate DATE,
    EndDate DATE
);

CREATE TABLE EmployeeProjects (
    EmployeeID INT,
    ProjectID INT,
    PRIMARY KEY (EmployeeID, ProjectID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (ProjectID) REFERENCES Projects(ProjectID)
);
```

2. **Create a View**:


CREATE VIEW EmployeeDetails AS
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    d.DepartmentName,
    e.Salary,
    e.DateHired
FROM 
    Employees e
JOIN 
    Departments d ON e.DepartmentID = d.DepartmentID;


3. **Create an Index**:


CREATE INDEX idx_lastname ON Employees (LastName);


4. **Create a Sequence** (MySQL uses `AUTO_INCREMENT`, but we can simulate a sequence with a table):


CREATE TABLE SequenceTable (
    id INT AUTO_INCREMENT PRIMARY KEY
);

INSERT INTO SequenceTable VALUES (NULL); -- Simulate next value


5. **Create a Synonym** (MySQL does not support synonyms directly, but you can create a view as an alias):


CREATE VIEW SynonymForDepartments AS
SELECT * FROM Departments;


# Write SQL DML Statements

1. **Insert Data**:


INSERT INTO Departments (DepartmentName, Location) VALUES ('IT', 'New York');
INSERT INTO Departments (DepartmentName, Location) VALUES ('HR', 'London');

INSERT INTO Employees (FirstName, LastName, DepartmentID, Salary, DateHired) 
VALUES ('John', 'Doe', 1, 60000, '2022-01-15');
INSERT INTO Employees (FirstName, LastName, DepartmentID, Salary, DateHired) 
VALUES ('Jane', 'Smith', 2, 65000, '2023-03-22');


2. **Select Data**:


SELECT * FROM EmployeeDetails;

SELECT FirstName, LastName FROM Employees WHERE Salary > 60000;


3. **Update Data**:


UPDATE Employees SET Salary = 70000 WHERE EmployeeID = 1;


4. **Delete Data**:


DELETE FROM Employees WHERE EmployeeID = 2;


5. **Complex Queries**:


-- Join and aggregate functions
SELECT 
    d.DepartmentName,
    COUNT(e.EmployeeID) AS NumberOfEmployees,
    AVG(e.Salary) AS AverageSalary
FROM 
    Departments d
LEFT JOIN 
    Employees e ON d.DepartmentID = e.DepartmentID
GROUP BY 
    d.DepartmentName;

-- Set operation: Union
SELECT FirstName, LastName FROM Employees WHERE DepartmentID = 1
UNION
SELECT FirstName, LastName FROM Employees WHERE DepartmentID = 2;

-- Using a function: CONCAT
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees;


